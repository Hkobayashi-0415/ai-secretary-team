services:
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_DB: ai_secretary
      POSTGRES_USER: ai_secretary_user
      POSTGRES_PASSWORD: ai_secretary_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_secretary_user -d ai_secretary"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - ai-secretary-network

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-secretary-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql+asyncpg://ai_secretary_user:ai_secretary_password@postgres:5432/ai_secretary
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - CORS_ORIGINS=http://frontend,http://localhost:3000,http://localhost:5173
      - SECRET_KEY=${SECRET_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        cd /app &&
        alembic upgrade head || alembic stamp head &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-secretary-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment: []
    depends_on:
      - backend
    networks:
      - ai-secretary-network

  e2e:
    image: mcr.microsoft.com/playwright:v1.55.0-jammy
    working_dir: /workspace/frontend
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    environment:
      CI: "true"
      # フロントの baseURL / API の両方を渡しておくと便利
      E2E_BASE_URL: http://frontend
      API_BASE: http://backend:8000
    volumes:
      - ./frontend:/workspace/frontend
      - ./scripts:/workspace/scripts:ro
      - npm-cache:/root/.npm
      - playwright-cache:/root/.cache/ms-playwright
      - node-modules:/workspace/frontend/node_modules
    command: ["bash","-lc","../scripts/e2e-entry.sh"]
    networks:
      - ai-secretary-network

volumes:
  ai-secretary-postgres-data:
    driver: local
  # ⬇ 追加
  npm-cache:
  playwright-cache:
  node-modules: