name: E2E (Playwright)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  e2e:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ❶ CI用 .env を生成（鍵は空／検証スキップ）
      - name: Create .env for CI
        run: |
          cat > .env <<'EOF'
          GEMINI_API_KEY=
          GOOGLE_SEARCH_API_KEY=
          OPENAI_API_KEY=
          DATABASE_URL=postgresql://ai_secretary_user:ai_secretary_password@postgres:5432/ai_secretary
          POSTGRES_DB=ai_secretary
          POSTGRES_USER=ai_secretary_user
          POSTGRES_PASSWORD=ai_secretary_password
          REDIS_URL=redis://redis:6379
          ENVIRONMENT=development
          DEBUG=true
          SECRET_KEY=ci-secret
          CORS_ORIGINS=http://localhost:3000,http://localhost:5173
          MAX_FILE_SIZE=10485760
          UPLOAD_DIR=./uploads
          LOG_LEVEL=INFO
          LOG_FILE=./logs/app.log
          VOICE_ENABLED=false
          DEFAULT_VOICE_PROVIDER=google_tts
          JWT_SECRET_KEY=dev
          JWT_ALGORITHM=HS256
          ACCESS_TOKEN_EXPIRE_MINUTES=30
          DEV_MODE=true
          SKIP_API_VALIDATION=true
          EOF
          mkdir -p uploads logs

      # ❷ Docker Compose 起動（ビルド込み）
      - name: Start app stack
        run: docker compose up -d --build

      # ❸ サービス待機（余裕長め）
      - name: Wait for services (health & UI)
        run: |
          for i in {1..120}; do
            (curl -fsS http://localhost:8000/health >/dev/null) && \
            (curl -fsS http://localhost:3000      >/dev/null) && break
            echo "Waiting for services... ($i/120)"; sleep 3
          done
          curl -f http://localhost:8000/health
          curl -f http://localhost:3000

      # ❹ DBマイグレーション（これが無いと 500/テーブル無し で落ちがち）
      - name: Run DB migrations
        run: docker compose exec -T backend alembic upgrade head

      # ❺ APIの基本疎通を1回だけ確認（JSON配列が返ればOK）
      - name: Smoke check API
        run: curl -f http://localhost:8000/api/v1/assistants/

      # ❻ Node & Playwright をセットアップ（テストはホスト側で実行）
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps and Playwright
        working-directory: frontend
        run: |
          npm ci
          npx playwright install --with-deps

      # ❼ E2E 実行
      - name: Run Playwright tests
        working-directory: frontend
        run: npm run test:e2e

      # ❽ 失敗時ログ収集
      - name: Docker logs (on failure)
        if: failure()
        run: docker compose logs --no-color > docker-logs.txt

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report
          retention-days: 7

      - name: Upload docker logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: docker-logs.txt
          retention-days: 7
