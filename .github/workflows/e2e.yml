name: E2E (Playwright)

on:
  push:
    branches: [ main ]
  pull_request:

# Secrets / 公開値の注入（ファイルは作らない）
env:
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  SECRET_KEY:     ${{ secrets.SECRET_KEY }}
  VITE_API_URL:   http://backend:8000  # フロントのAPI基点（ビルド時に注入）

jobs:
  e2e:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 画像ビルド（フロントはビルド引数で VITE_API_URL を注入）
      - name: Build images
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml build postgres redis
          docker compose -f docker-compose.yml -f docker-compose.ci.yml build backend
          docker compose -f docker-compose.yml -f docker-compose.ci.yml build \
            --build-arg VITE_API_URL=${VITE_API_URL} frontend

      # まず DB/Redis を起動
      - name: Start database layer
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d postgres redis

      # 健康状態の待機（サービス名からCIDを取得してinspect）
      - name: Wait for postgres/redis health
        run: |
          set -e
          DC="docker compose -f docker-compose.yml -f docker-compose.ci.yml"
          for i in $(seq 1 120); do
            PG_CID=$($DC ps -q postgres)
            RD_CID=$($DC ps -q redis)
            PG=$([ -n "$PG_CID" ] && docker inspect -f '{{.State.Health.Status}}' "$PG_CID" || echo "")
            RD=$([ -n "$RD_CID" ] && docker inspect -f '{{.State.Health.Status}}' "$RD_CID" || echo "")
            echo "postgres=${PG:-unknown} redis=${RD:-unknown} (${i}/120)"
            [ "$PG" = "healthy" ] && [ "$RD" = "healthy" ] && break
            sleep 2
          done
          $DC ps

      # マイグレーション（スキーマ既存なら stamp で整合）
      - name: Migrate DB (upgrade or stamp)
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm backend alembic upgrade head || \
          docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm backend alembic stamp head

      # アプリ起動（内部ネットワークのみ）
      - name: Start app services
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d backend frontend

      # Playwright をコンテナで実行（E2E_BASE_URL=http://frontend）
      - name: Run Playwright tests in container
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm e2e

      # ログ収集
      - name: Docker ps & logs (always)
        if: always()
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml ps
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs --no-color > docker-logs.txt || true

      # E2Eレポートのアーティファクト保存
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report
          retention-days: 7

      - name: Upload docker logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: docker-logs.txt
          retention-days: 7

      # お片づけ
      - name: Cleanup (always)
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml down -v
