name: E2E (Playwright)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  e2e:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ❶ CI用 .env を生成（鍵は空／検証スキップ）
      - name: Create .env for CI
        run: |
          cat > .env <<'EOF'
          GEMINI_API_KEY=
          GOOGLE_SEARCH_API_KEY=
          OPENAI_API_KEY=
          DATABASE_URL=postgresql://ai_secretary_user:ai_secretary_password@postgres:5432/ai_secretary
          POSTGRES_DB=ai_secretary
          POSTGRES_USER=ai_secretary_user
          POSTGRES_PASSWORD=ai_secretary_password
          REDIS_URL=redis://redis:6379
          ENVIRONMENT=development
          DEBUG=true
          SECRET_KEY=ci-secret
          CORS_ORIGINS=http://localhost:3000,http://localhost:5173
          MAX_FILE_SIZE=10485760
          UPLOAD_DIR=./uploads
          LOG_LEVEL=INFO
          LOG_FILE=./logs/app.log
          VOICE_ENABLED=false
          DEFAULT_VOICE_PROVIDER=google_tts
          JWT_SECRET_KEY=dev
          JWT_ALGORITHM=HS256
          ACCESS_TOKEN_EXPIRE_MINUTES=30
          DEV_MODE=true
          SKIP_API_VALIDATION=true
          EOF
          mkdir -p uploads logs

      # ❷ 必要サービスのみビルド（override を併用）
      - name: Build images
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml build backend frontend postgres redis

      # ❸ まず DB/Redis だけ先に起動してヘルス待ち
      - name: Start database layer
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d postgres redis

      - name: Wait for postgres/redis health
        run: |
          for i in {1..120}; do
            PG=$(docker inspect -f '{{.State.Health.Status}}' ai-secretary-postgres 2>/dev/null || true)
            RD=$(docker inspect -f '{{.State.Health.Status}}' ai-secretary-redis 2>/dev/null || true)
            echo "postgres=$PG redis=$RD ($i/120)"
            [ "$PG" = "healthy" ] && [ "$RD" = "healthy" ] && break
            sleep 2
          done
          docker compose -f docker-compose.yml -f docker-compose.ci.yml ps

      # ❹ マイグレーションを先に実行（バックエンド起動前）
      - name: Migrate DB (upgrade or stamp if schema already exists)
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm backend alembic upgrade head || \
          docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm backend alembic stamp head

      # ❺ API/フロント起動
      - name: Start app services
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d backend frontend

      # ❻ API/フロント疎通待ち（/health と :3000）
      - name: Wait for services (health & UI)
        run: |
          for i in {1..120}; do
            (curl -fsS http://localhost:8000/health >/dev/null) && \
            (curl -fsS http://localhost:3000      >/dev/null) && break
            echo "Waiting for services... ($i/120)"; sleep 3
          done
          curl -f http://localhost:8000/health
          curl -f http://localhost:3000

      # ❼ Node & Playwright をホスト側で用意
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps and Playwright
        working-directory: frontend
        run: |
          npm ci
          npx playwright install --wi
