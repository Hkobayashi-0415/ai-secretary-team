name: e2e

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: e2e-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e:
    runs-on: ubuntu-latest

    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
      # Backend が要求するがテストでは未使用なのでダミーでOK
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || 'dummy' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show Docker versions
        run: |
          docker version
          docker compose version

      # まず画像類をビルド＆起動（CI向けcomposeも併用）
      - name: Build & Up
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml build
          docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d

      # Build & Up の直後
      - name: Backend logs (early peek)
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs --no-color backend | tail -n 200 || true


      # 遅い環境に合わせて丁寧に待つ（backend health + frontend 200）
      - name: Wait for services
        shell: bash
        run: |
          set -eux
          # backend ヘルス（最大120秒）
          for i in {1..24}; do
            if docker compose ps --format json | jq -e '.[] | select(.Service=="backend") | .Health=="healthy"' >/dev/null; then
              echo "backend healthy"; break
            fi
            sleep 5
          done
          # frontend のHTTP 200（最大120秒）
          for i in {1..24}; do
            if docker compose -f docker-compose.yml -f docker-compose.ci.yml exec -T e2e curl -sSf http://frontend/assistants >/dev/null; then
              echo "frontend responding"; break
            fi
            sleep 5
          done

       # 既存の Wait for services の後でも可（両方でも OK）
      - name: Dump logs (on failure)
        if: failure()
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml ps
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs --no-color postgres backend frontend | tee compose.logs || true 

      - name: Run e2e tests
        run: |
          set -eux
          docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm -T e2e

      # 失敗したときのログ・レポート採取
      - name: Dump logs (on failure)
        if: failure()
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml ps
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs --no-color postgres backend frontend | tee compose.logs || true

      - name: Collect Playwright report
        if: always()
        run: |
          mkdir -p artifacts
          # e2e コンテナ側の出力をコピー（存在しなくてもOKにする）
          docker ps -a
          CID=$(docker ps -a --filter "name=e2e" --format "{{.ID}}" | head -n1 || true)
          if [ -n "$CID" ]; then
            docker cp "$CID":/workspace/frontend/playwright-report ./artifacts/playwright-report || true
            docker cp "$CID":/workspace/frontend/test-results ./artifacts/test-results || true
          fi
          [ -f compose.logs ] && cp compose.logs artifacts/ || true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts
          path: artifacts
