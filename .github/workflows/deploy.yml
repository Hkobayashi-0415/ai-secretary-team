name: Deploy AI Secretary Platform

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov
          pip install asyncpg
          pip install "httpx>=0.27"

      - name: Run tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@127.0.0.1:5432/test_db
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test
          DISABLE_LLM_VALIDATION: "1"
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          cd backend
          pytest --cov=app --cov-report=xml || (if [ $? -eq 5 ]; then echo "No tests found, proceeding."; else exit $?; fi)

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker images
        run: |
          set -euo pipefail
          IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')

          # build
          docker build -f backend/Dockerfile.common      -t ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/backend:common   ./backend
          docker build -f frontend/Dockerfile.common     -t ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/frontend:common  ./frontend
          docker build -f backend/Dockerfile.production  -t ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/backend:latest   ./backend
          docker build -f frontend/Dockerfile.production -t ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/frontend:latest  ./frontend

          # push
          docker push ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/backend:common
          docker push ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/frontend:common
          docker push ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/backend:latest
          docker push ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/frontend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to production
        run: |
          echo "Deploy to production server"
          # 実際のデプロイスクリプトをここに
