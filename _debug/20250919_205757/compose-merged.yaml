name: ai-secretary-team
services:
  backend:
    build:
      context: C:\Users\sugar\OneDrive\デスクトップ\ai-secretary-team\backend
      dockerfile: Dockerfile
    command:
      - sh
      - -c
      - |2
          echo 'Waiting for database...' &&
          sleep 5 &&
          cd /app &&
          (alembic current || alembic stamp head) &&
          alembic upgrade head &&
          uvicorn app.main:app --host 0.0.0.0 --port 8000
    container_name: ai-secretary-backend
    depends_on:
      postgres:
        condition: service_healthy
        required: true
      redis:
        condition: service_healthy
        required: true
    environment:
      CORS_ORIGINS: http://frontend,http://localhost:3000,http://localhost:5173
      DATABASE_URL: postgresql+asyncpg://ai_secretary_user:ai_secretary_password@postgres:5432/ai_secretary
      DB_HOST: postgres
      DB_NAME: ai_secretary
      DB_USER: ai_secretary_user
      DEFAULT_USER_ID: 11111111-1111-1111-1111-111111111111
      ENVIRONMENT: development
      GEMINI_API_KEY: AIzaSyBth1NEer2qiMH9niE4GqsCJhsRQBDqFuc
      POSTGRES_PASSWORD: ai_secretary_password
      REDIS_URL: redis://redis:6379
      SECRET_KEY: your_secret_key_here_change_in_production
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://localhost:8000/health
      timeout: 10s
      interval: 30s
      retries: 3
      start_period: 40s
    networks:
      ai-secretary-network: null
    ports:
      - mode: ingress
        target: 8000
        published: "8000"
        protocol: tcp
    volumes:
      - type: bind
        source: C:\Users\sugar\OneDrive\デスクトップ\ai-secretary-team\backend
        target: /app
        bind:
          create_host_path: true
  e2e:
    build:
      context: C:\Users\sugar\OneDrive\デスクトップ\ai-secretary-team
      dockerfile: e2e/Dockerfile
    depends_on:
      backend:
        condition: service_healthy
        required: true
      frontend:
        condition: service_started
        required: true
    environment:
      API_BASE: http://backend:8000
      CI: "true"
      FRONTEND_URL: http://frontend
    networks:
      ai-secretary-network: null
    working_dir: /workspace/frontend
  frontend:
    build:
      context: C:\Users\sugar\OneDrive\デスクトップ\ai-secretary-team\frontend
      dockerfile: Dockerfile
    container_name: ai-secretary-frontend
    depends_on:
      backend:
        condition: service_healthy
        required: true
    environment:
      NODE_ENV: development
      VITE_API_URL: /api
    networks:
      ai-secretary-network: null
    ports:
      - mode: ingress
        target: 80
        published: "3000"
        protocol: tcp
    volumes:
      - type: bind
        source: C:\Users\sugar\OneDrive\デスクトップ\ai-secretary-team\frontend
        target: /app
        bind:
          create_host_path: true
      - type: volume
        target: /app/node_modules
        volume: {}
  frontend-dev:
    build:
      context: C:\Users\sugar\OneDrive\デスクトップ\ai-secretary-team\frontend
      dockerfile: Dockerfile.dev
    container_name: ai-secretary-frontend-dev
    depends_on:
      backend:
        condition: service_started
        required: true
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:8000
    networks:
      ai-secretary-network: null
    ports:
      - mode: ingress
        target: 5173
        published: "5173"
        protocol: tcp
    volumes:
      - type: bind
        source: C:\Users\sugar\OneDrive\デスクトップ\ai-secretary-team\frontend
        target: /app
        bind:
          create_host_path: true
      - type: volume
        target: /app/node_modules
        volume: {}
  pgadmin:
    container_name: ai-secretary-pgadmin
    depends_on:
      postgres:
        condition: service_started
        required: true
    environment:
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_DEFAULT_EMAIL: admin@ai-secretary.local
      PGADMIN_DEFAULT_PASSWORD: admin123
    image: dpage/pgadmin4:latest
    networks:
      ai-secretary-network: null
    ports:
      - mode: ingress
        target: 80
        published: "5050"
        protocol: tcp
    volumes:
      - type: bind
        source: C:\Users\sugar\OneDrive\デスクトップ\ai-secretary-team\database\pgadmin
        target: /var/lib/pgadmin
        bind:
          create_host_path: true
  postgres:
    container_name: ai-secretary-postgres
    environment:
      POSTGRES_DB: ai_secretary
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
      POSTGRES_PASSWORD: ai_secretary_password
      POSTGRES_USER: ai_secretary_user
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U ai_secretary_user -d ai_secretary
      timeout: 5s
      interval: 10s
      retries: 5
      start_period: 30s
    image: pgvector/pgvector:pg16
    networks:
      ai-secretary-network: null
    ports:
      - mode: ingress
        target: 5432
        published: "5432"
        protocol: tcp
    volumes:
      - type: volume
        source: ai-secretary-postgres-data
        target: /var/lib/postgresql/data
        volume: {}
      - type: bind
        source: C:\Users\sugar\OneDrive\デスクトップ\ai-secretary-team\database\init
        target: /docker-entrypoint-initdb.d
        read_only: true
        bind:
          create_host_path: true
  redis:
    command:
      - redis-server
      - --appendonly
      - "yes"
    container_name: ai-secretary-redis
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      timeout: 5s
      interval: 10s
      retries: 5
    image: redis:7-alpine
    networks:
      ai-secretary-network: null
    ports:
      - mode: ingress
        target: 6379
        published: "6379"
        protocol: tcp
    volumes:
      - type: volume
        source: ai-secretary-redis-data
        target: /data
        volume: {}
networks:
  ai-secretary-network:
    name: ai-secretary-team_ai-secretary-network
    driver: bridge
volumes:
  ai-secretary-postgres-data:
    name: ai-secretary-team_ai-secretary-postgres-data
    driver: local
  ai-secretary-redis-data:
    name: ai-secretary-team_ai-secretary-redis-data
    driver: local
