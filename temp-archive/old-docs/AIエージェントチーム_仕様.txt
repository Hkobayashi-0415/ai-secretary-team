### プロジェクト仕様書：統合型AI秘書チーム・プラットフォーム
* **ドキュメントバージョン:** v5.0 (実装用FIX版)
* **作成日:** 2025年6月25日
* **目的:** 本ドキュメントは、AIコーディングツールまたは開発者が実装に着手できるよう、プロジェクトの全要件・機能・仕様を定義するものである。

---

### 1. 要件定義書

#### 1.1. 概要
本プロジェクトは、複数の専門性を持つAIアシスタント（以下、AI秘書）をチームとして編成し、ユーザーが「司令塔」としてタスクを委任・管理できる、統合型のパーソナルオートメーションプラットフォームを構築する。

#### 1.2. 背景と目的
個人や組織に散在する情報（クラウド上の文書、個人のメモ、Web上の最新情報）を一元的に活用し、定型的なリサーチ、レポート作成、資料作成、SNS投稿などの知的労働を自動化・半自動化することで、ユーザーの生産性を飛躍的に向上させることを目的とする。

#### 1.3. システム化の範囲
* **フロントエンド:** ユーザーがAI秘書チームと対話し、タスクを管理するためのWebインターフェース。音声入力、ドラッグ＆ドロップやペーストによる直感的な画像・ファイル添付に対応する。
* **バックエンド:** 複数のAIエージェント、ワークフローエンジン、外部API連携などを司るサーバーアプリケーション。
* **データーストレージ:** AI秘書の設定、会話履歴、ワークフロー定義、そして知識の集積地となるデータベース群。
* **連携対象:**
    * **データソース（入力）:** Googleドライブ（Obsidian Vault含む）、Web、ユーザーの音声・画像・ファイル。
    * **LLM（思考）:** Google Gemini, OpenAI GPT, Anthropic Claudeなど、ユーザーが選択可能なマルチモーダル対応モデル。
    * **外部サービス（出力）:** 各種SNS, 外部音声合成API, Obsidianなど。

---

### 2. 機能定義書

#### 2.1. ユーザー入力機能
* **2.1.1. テキスト入力:** キーボードによるプロンプト入力。
* **2.1.2. 音声入力:** マイクを通じて音声でプロンプトを入力する機能。
* **2.1.3. 画像・ファイル入力機能:** ドラッグ＆ドロップ、およびクリップボードからのスクリーンショット直接貼り付けによる、画像・ファイルのプロンプトへの添付機能。

#### 2.2. ユーザー操作機能
* **2.2.1. AI秘書選択機能:** デフォルトで対話する「メイン秘書」を複数の中から選択・設定できる。
* **2.2.2. AIモデル選択機能:** 各タスク実行時に使用するLLMを任意に選択できる。
* **2.2.3. レポート表示機能:** 長文レポートを専用の別ウィンドウで表示できる。
* **2.2.4. ワークフロー管理機能:** 複合タスクを「ワークフロー」として管理し、ワンクリックで実行を指示できる。

#### 2.3. AI秘書機能
* **2.3.1. ペルソナ設定:** 各秘書に、固有のキャラクター（性格、口調）、音声パターン、イラストを紐づけて設定できる。
* **2.3.2. 情報共有機能:** 共有ベクトルDBを介した長期的な「知識」の共有。セッション内の会話履歴は短期記憶として共有。
* **2.3.3. 音声出力機能:**
    * 2.3.3.1. ユーザーはUI上のトグルスイッチで、音声出力のOn/Offをグローバルに切り替えられる。
    * 2.3.3.2. 音声Onの場合、AIからの短い応答テキストは、表示と同時に自動で音声再生される。
    * 2.3.3.3. 長文レポートや資料作成結果は、音声Onでも自動再生されず、専用ビュー内の「読み上げ」ボタン押下によってのみ再生される。
    * 2.3.3.4. タスク完了通知（「作業が完了しました」等）は、短い応答と見なされ、音声Onの場合は自動再生される。

#### 2.4. タスク実行機能
* **2.4.1. 対話タスク:** 画像・ファイルを含むマルチモーダルな質疑応答。
* **2.4.2. リサーチタスク:**
    * **通常リサーチ:** 指定されたキーワードに基づき情報を検索・要約する。
    * **DEEPリサーチ:** 検索クエリの多様化、参照元ページのリンクを辿る再帰的調査などを組み合わせ、より網羅的・深層的な調査を行う。
* **2.4.3. 資料作成タスク:** ユーザーがテキストや添付画像・ファイルを提示し、LLMを指定すると、HTML等の整形された資料を生成する。

#### 2.5. 連携機能
* **2.5.1. Googleドライブ連携:** ユーザーのGoogleドライブ内のファイルを読み書きする。
* **2.5.2. Obsidian連携:** 生成されたレポートやメモを、ユーザーのObsidianにノートとして保存する。
* **2.5.3. SNS連携:** 生成された内容を、ユーザーの承認を経て指定のSNSアカウントに投稿する。

---

### 3. 技術仕様書

#### 3.1. 全体アーキテクチャ図 (Mermaid)

```mermaid
graph TD
    subgraph User Environment
        User("[👤 User]")
        Browser["🌐 Browser (Frontend)"]
    end

    subgraph Cloud Backend
        API_GW["- API Gateway -"]
        subgraph LangGraph Agents
            Agent_A["🤖 Agent A (Main)"]
            Agent_B["🤖 Agent B (Research)"]
            Agent_C["🤖 Agent C (Creative)"]
        end
        WF_Engine["⚙️ Workflow Engine"]
    end

    subgraph Data & Services
        Auth["🔐 Auth Service (Firebase/Auth0)"]
        Postgres["🐘 PostgreSQL (Configs/Logs)"]
        VectorDB["🧠 Vector DB (Knowledge)"]
        G_Drive["📄 Google Drive API"]
        LLM["💡 LLM APIs (Gemini/GPT/Claude)"]
        TTS["🗣️ TTS API"]
        SNS["🔗 SNS APIs"]
    end

    User -- Interacts --> Browser
    Browser -- API Calls --> API_GW
    API_GW -- Routes to --> WF_Engine
    API_GW -- Routes to --> Agent_A
    WF_Engine -- Executes --> Agent_A & Agent_B & Agent_C

    Agent_A & Agent_B & Agent_C -- Uses --> LLM
    Agent_A & Agent_B & Agent_C -- Accesses --> VectorDB
    Agent_A & Agent_B & Agent_C -- Reads/Writes --> Postgres
    Agent_B -- Reads/Writes --> G_Drive
    Agent_C -- Posts to --> SNS
    API_GW -- Uses --> TTS
    Browser -- Authenticates via --> Auth
3.2. フロントエンド仕様
技術スタック: React, Vite, TypeScript, Tailwind CSS
状態管理: React Context API または Zustand 等の軽量なライブラリ。
API通信: axios または fetch。LangGraphとのリアルタイム通信には @langchain/langgraph-sdk を利用。
主要コンポーネント: ChatView, AgentSelector, ModelSelector, WorkflowManager, ReportWindow, FileInput (D&amp;D, Paste対応)。
ブラウザAPI: Web Speech API (SpeechRecognition) で音声入力、FileReader API でファイル/画像処理。
3.3. バックエンド仕様
技術スタック: Python, FastAPI, LangGraph
APIエンドポイント (例):
POST /api/v1/chat/submit: メインの対話・タスク実行エンドポイント。マルチパート形式でテキストとファイルを受け付ける。
GET /api/v1/assistants: 利用可能なAI秘書の一覧を返す。
POST /api/v1/workflows/{workflow_id}/run: 指定されたワークフローを実行。
POST /api/v1/tts: テキストを受け取り、音声データをストリーミングで返す。
モデル管理: モデルIDに応じて ChatGoogleGenerativeAI, ChatOpenAI, ChatAnthropic のインスタンスを生成するFactoryを実装。マルチモーダル入力の形式差異を吸収する。
ツール定義: GoogleDriveSearchTool, VectorDBSearchTool, HTMLCreationTool, SNSPostTool 等、各機能をクラスとしてモジュール化する。
3.4. データベーススキーマ (PostgreSQL)
assistants テーブル:
SQL

CREATE TABLE assistants (
    id VARCHAR(255) PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL, -- マルチテナント用
    name VARCHAR(255) NOT NULL,
    description TEXT,
    system_prompt TEXT NOT NULL,
    llm_model_default VARCHAR(255),
    voice_id VARCHAR(255),
    illustration_url VARCHAR(255),
    tools TEXT[] -- 利用可能なツールのリスト
);
workflows テーブル:
SQL

CREATE TABLE workflows (
    id SERIAL PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL, -- マルチテナント用
    name VARCHAR(255) NOT NULL,
    description TEXT
);
workflow_steps テーブル:
SQL

CREATE TABLE workflow_steps (
    id SERIAL PRIMARY KEY,
    workflow_id INTEGER REFERENCES workflows(id) ON DELETE CASCADE,
    step_order INTEGER NOT NULL,
    assistant_id VARCHAR(255) REFERENCES assistants(id),
    prompt_template TEXT, -- このステップ専用の指示
    input_source_step_id INTEGER, -- 前のステップの出力を利用する場合
    UNIQUE(workflow_id, step_order)
);
ベクトルDB: スキーマレス、またはコレクション/インデックスで管理。各ベクトルには user_id, source_file_id 等のメタデータを付与。
3.5. セキュリティ仕様
認証: Googleドライブ連携はOAuth 2.0。アプリケーション自体のログインはFirebase Authentication等の外部サービスを利用。
通信: 全ての通信経路でTLS 1.2以上を使用 (HTTPS)。
機密情報管理: APIキー、DB接続情報、秘密鍵は、クラウドプロバイダーのシークレットマネージャーまたは暗号化された環境変数で管理。
入力サニタイズ: ユーザーからの全ての入力（テキスト、アップロードファイル）に対して、基本的なサニタイズとバリデーションを実施。
4. 技術スタック一覧
領域	技術・ライブラリ	役割・備考
フロントエンド	React, Vite, TypeScript, Tailwind CSS	UI構築とユーザーインタラクション
バックエンド	Python, FastAPI, LangGraph	AIエージェント、APIサーバー、ワークフロー制御
リレーショナルDB	PostgreSQL	設定、ログ、ワークフロー定義などの構造化データ管理
ベクトルDB	ChromaDB (ローカル/自己ホスト) or Vertex AI Vector Search (クラウド)	ドキュメントの知識化とセマンティック検索
認証	Firebase Authentication / Auth0	ユーザーサインアップ、ログイン、セッション管理
クラウド連携	Google Drive API, 各種SNS API	外部データソースおよび出力先との連携
AI/LLM	langchain-google-genai, langchain-openai, langchain-anthropic	複数の大規模言語モデルとの連携
音声	Web Speech API (入力), 外部TTS API (出力)	音声による対話機能
インフラ	Docker, Google Cloud Run / AWS Fargate (本番)	コンテナ化とスケーラブルな本番運用
